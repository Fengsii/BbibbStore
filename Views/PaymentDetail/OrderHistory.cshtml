
@* @using EFENGSI_RAHMANTO_ZALUKHU.Models.DTO *@
@* @model PaymentViewModelDTO *@

@* @{ *@
@*     ViewData["Title"] = "History Order"; *@
@*     Layout = null; *@
@* } *@

@* <DOCTYPE html> *@
@*     <html lang="id"> *@
@*     <head> *@
@*         <meta charset="UTF-8"> *@
@*         <meta name="viewport" content="width=device-width, initial-scale=1.0"> *@
@*         <title>Riwayat Pesanan</title> *@
@*         <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet"> *@
@*         <link href="https://cdn.jsdelivr.net/npm/@@fortawesome/fontawesome-free/css/all.min.css" rel="stylesheet"> *@
@*         <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet"> *@
@*         <link rel="stylesheet" href="~/assets3/Css/OrderStyle.css" /> *@

@*     </head> *@
@*     <body> *@
@*         <div class="container py-5"> *@
@*             <h1 class="mb-4 text-center">Riwayat Pesanan</h1> *@

@*             <!-- Glassmorphism Tabs --> *@
@*             <ul class="nav nav-tabs justify-content-center mb-4"> *@
@*                 <li class="nav-item"> *@
@*                     <a class="nav-link active" onclick="filterOrders('all')"><i class="fas fa-list"></i> Semua</a> *@
@*                 </li> *@
@*                 <li class="nav-item"> *@
@*                     <a class="nav-link" onclick="filterOrders('canceled')"><i class="fas fa-times-circle"></i> Dibatalkan</a> *@
@*                 </li> *@
@*                 <li class="nav-item"> *@
@*                     <a class="nav-link" onclick="filterOrders('unpaid')"><i class="fas fa-wallet"></i> Belum Dibayar</a> *@
@*                 </li> *@
@*                 <li class="nav-item"> *@
@*                     <a class="nav-link" onclick="filterOrders('processing')"><i class="fas fa-clock"></i> Diproses</a> *@
@*                 </li> *@
@*                 <li class="nav-item"> *@
@*                     <a class="nav-link" onclick="filterOrders('shipped')"><i class="fas fa-truck"></i> Dikirim</a> *@
@*                 </li> *@
@*                 <li class="nav-item"> *@
@*                     <a class="nav-link" onclick="filterOrders('delivered')"><i class="fas fa-check-circle"></i> Selesai</a> *@
@*                 </li> *@
@*             </ul> *@

@*             <!-- Order List --> *@
@*             <div id="order-list"> *@
@*                 @foreach (var item in Model.OrderDetails) *@
@*                 { *@
@*                     <div class="card order-card canceled" style="--delay: 0.6s;"> *@
@*                         <div class="card-body d-flex align-items-center"> *@
@*                             <img src="@item.Product.Image" alt="@item.Product.Name" *@
@*                             onerror="this.onerror=null;this.src='/images/default-product.png.jpeg';"> *@
@*                             <i class="fas fa-times-circle status-icon me-3"></i> *@
@*                             <div> *@
@*                                 <h5 class="card-title">@Model.OrderCode</h5> *@
@*                                 <p class="card-text">Status: @item.Order.Status</p> *@
@*                                 <p class="card-text text-secondary">Order Date: @item.Order.OrderDate</p> *@
@*                                 <p class="card-text text-secondary">Quantity: Rp @item.Quantity</p> *@
@*                                 <p class="card-text text-secondary">: Rp @item.PriceAtPurchase</p> *@
@*                                 <p class="card-text text-secondary">Quantity: Rp @((item.PriceAtPurchase * item.Quantity).ToString("N0"))</p> *@
@*                             </div> *@
@*                         </div> *@
@*                     </div> *@
@*                 } *@
@*                 @foreach (var item in Model.OrderDetails) *@
@*                 { *@
@*                     <div class="card order-card unpaid" style="--delay: 0.7s;"> *@
@*                         <input type="checkbox" class="order-checkbox" data-order-id="12346" data-order-amount="180000"> *@
@*                         <div class="card-body d-flex align-items-center"> *@
@*                             <img src="@item.Product.Image" alt="@item.Product.Name" *@
@*                                  onerror="this.onerror=null;this.src='/images/default-product.png.jpeg';"> *@
@*                             <i class="fas fa-wallet status-icon me-3"></i> *@
@*                             <div> *@
@*                                 <h5 class="card-title">@Model.OrderCode</h5> *@
@*                                 <p class="card-text">Status: @item.Order.Status</p> *@
@*                                 <p class="card-text text-secondary">Order Date: @item.Order.OrderDate</p> *@
@*                                 <p class="card-text text-secondary">Quantity: Rp @item.Quantity</p> *@
@*                                 <p class="card-text text-secondary">: Rp @item.PriceAtPurchase</p> *@
@*                                 <p class="card-text text-secondary">Quantity: Rp @((item.PriceAtPurchase * item.Quantity).ToString("N0"))</p> *@
@*                             </div> *@
@*                         </div> *@
@*                     </div> *@
@*                 } *@
@*                 @foreach (var item in Model.OrderDetails) *@
@*                 { *@
@*                     <div class="card order-card unpaid" style="--delay: 0.8s;"> *@
@*                         <input type="checkbox" class="order-checkbox" data-order-id="12346" data-order-amount="180000"> *@
@*                         <div class="card-body d-flex align-items-center"> *@
@*                             <img src="@item.Product.Image" alt="@item.Product.Name" *@
@*                                  onerror="this.onerror=null;this.src='/images/default-product.png.jpeg';"> *@
@*                             <i class="fas fa-wallet status-icon me-3"></i> *@
@*                             <div> *@
@*                                 <h5 class="card-title">@Model.OrderCode</h5> *@
@*                                 <p class="card-text">Status: @item.Order.Status</p> *@
@*                                 <p class="card-text text-secondary">Order Date: @item.Order.OrderDate</p> *@
@*                                 <p class="card-text text-secondary">Quantity: Rp @item.Quantity</p> *@
@*                                 <p class="card-text text-secondary">: Rp @item.PriceAtPurchase</p> *@
@*                                 <p class="card-text text-secondary">Quantity: Rp @((item.PriceAtPurchase * item.Quantity).ToString("N0"))</p> *@
@*                             </div> *@
@*                         </div> *@
@*                     </div> *@
@*                 } *@
@*                 @foreach (var item in Model.OrderDetails) *@
@*                 { *@
@*                     <div class="card order-card processing" style="--delay: 0.9s;"> *@
@*                         <input type="checkbox" class="order-checkbox" data-order-id="12346" data-order-amount="180000"> *@
@*                         <div class="card-body d-flex align-items-center"> *@
@*                             <img src="@item.Product.Image" alt="@item.Product.Name" *@
@*                                  onerror="this.onerror=null;this.src='/images/default-product.png.jpeg';"> *@
@*                             <i class="fas fa-wallet status-icon me-3"></i> *@
@*                             <div> *@
@*                                 <h5 class="card-title">@Model.OrderCode</h5> *@
@*                                 <p class="card-text">Status: @item.Order.Status</p> *@
@*                                 <p class="card-text text-secondary">Order Date: @item.Order.OrderDate</p> *@
@*                                 <p class="card-text text-secondary">Quantity: Rp @item.Quantity</p> *@
@*                                 <p class="card-text text-secondary">: Rp @item.PriceAtPurchase</p> *@
@*                                 <p class="card-text text-secondary">Quantity: Rp @((item.PriceAtPurchase * item.Quantity).ToString("N0"))</p> *@
@*                             </div> *@
@*                         </div> *@
@*                     </div> *@
@*                 } *@
@*                 @foreach (var item in Model.OrderDetails) *@
@*                 { *@
@*                     <div class="card order-card delivered" style="--delay: 1s;"> *@
@*                         <input type="checkbox" class="order-checkbox" data-order-id="12346" data-order-amount="180000"> *@
@*                         <div class="card-body d-flex align-items-center"> *@
@*                             <img src="@item.Product.Image" alt="@item.Product.Name" *@
@*                                  onerror="this.onerror=null;this.src='/images/default-product.png.jpeg';"> *@
@*                             <i class="fas fa-wallet status-icon me-3"></i> *@
@*                             <div> *@
@*                                 <h5 class="card-title">@Model.OrderCode</h5> *@
@*                                 <p class="card-text">Status: @item.Order.Status</p> *@
@*                                 <p class="card-text text-secondary">Order Date: @item.Order.OrderDate</p> *@
@*                                 <p class="card-text text-secondary">Quantity: Rp @item.Quantity</p> *@
@*                                 <p class="card-text text-secondary">: Rp @item.PriceAtPurchase</p> *@
@*                                 <p class="card-text text-secondary">Quantity: Rp @((item.PriceAtPurchase * item.Quantity).ToString("N0"))</p> *@
@*                             </div> *@
@*                         </div> *@
@*                     </div> *@
@*                 } *@
@*     </div> *@
@*   </div> *@

@*   <!-- Checkout Button --> *@
@*   <div class="checkout-btn-container"> *@
@*     <button class="checkout-btn" onclick="proceedToCheckout()"> *@
@*       <i class="fas fa-shopping-cart"></i> Checkout (<span id="selected-count">0</span>) *@
@*     </button> *@
@*   </div> *@

@*   <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script> *@
@*   <script> *@
@*     // Filter orders by status *@
@*     function filterOrders(status) { *@
@*       const orders = document.querySelectorAll('.order-card'); *@
@*       const tabs = document.querySelectorAll('.nav-link'); *@
      
@*       // Update active tab *@
@*       tabs.forEach(tab => { *@
@*         tab.classList.remove('active'); *@
@*         if (tab.getAttribute('onclick').includes(status)) { *@
@*           tab.classList.add('active'); *@
@*         } *@
@*       }); *@

@*       // Filter orders *@
@*       orders.forEach(order => { *@
@*         if (status === 'all' || order.classList.contains(status)) { *@
@*           order.style.display = 'flex'; *@
@*         } else { *@
@*           order.style.display = 'none'; *@
@*         } *@
@*       }); *@
      
@*       // Show/hide checkout button based on filter *@
@*       const checkoutBtn = document.querySelector('.checkout-btn-container'); *@
@*       if (status === 'unpaid') { *@
@*         checkoutBtn.style.display = 'block'; *@
@*         // Add click event to all unpaid order checkboxes *@
@*         document.querySelectorAll('.unpaid .order-checkbox').forEach(checkbox => { *@
@*           checkbox.addEventListener('change', updateCheckoutButton); *@
@*         }); *@
@*       } else { *@
@*         checkoutBtn.style.display = 'none'; *@
@*         // Uncheck all checkboxes when not in unpaid tab *@
@*         document.querySelectorAll('.order-checkbox').forEach(checkbox => { *@
@*           checkbox.checked = false; *@
@*         }); *@
@*         updateCheckoutButton(); *@
@*       } *@
@*     } *@
    
@*     // Update checkout button with selected count and total *@
@*     function updateCheckoutButton() { *@
@*       const selectedCheckboxes = document.querySelectorAll('.order-checkbox:checked'); *@
@*       const selectedCount = selectedCheckboxes.length; *@
@*       const checkoutBtn = document.querySelector('.checkout-btn-container'); *@
@*       const countSpan = document.getElementById('selected-count'); *@
      
@*       countSpan.textContent = selectedCount; *@
      
@*       // Calculate total amount *@
@*       let totalAmount = 0; *@
@*       selectedCheckboxes.forEach(checkbox => { *@
@*         totalAmount += parseInt(checkbox.dataset.orderAmount); *@
@*       }); *@
      
@*       // Update button text if items are selected *@
@*       if (selectedCount > 0) { *@
@*         countSpan.textContent = selectedCount; *@
@*         checkoutBtn.querySelector('button').innerHTML =  *@
@*           `<i class="fas fa-shopping-cart"></i> Checkout (${selectedCount}) - Rp ${totalAmount.toLocaleString('id-ID')}`; *@
@*         checkoutBtn.classList.add('bounce-animation'); *@
@*         setTimeout(() => { *@
@*           checkoutBtn.classList.remove('bounce-animation'); *@
@*         }, 1000); *@
@*       } else { *@
@*         countSpan.textContent = '0'; *@
@*         checkoutBtn.querySelector('button').innerHTML =  *@
@*           `<i class="fas fa-shopping-cart"></i> Checkout (0)`; *@
@*       } *@
@*     } *@
    
@*     // Proceed to checkout/payment page *@
@*     function proceedToCheckout() { *@
@*       const selectedCheckboxes = document.querySelectorAll('.order-checkbox:checked'); *@
      
@*       if (selectedCheckboxes.length === 0) { *@
@*         alert('Silakan pilih setidaknya satu pesanan untuk checkout.'); *@
@*         return; *@
@*       } *@
      
@*       // Collect selected order IDs *@
@*       const selectedOrders = []; *@
@*       selectedCheckboxes.forEach(checkbox => { *@
@*         selectedOrders.push({ *@
@*           id: checkbox.dataset.orderId, *@
@*           amount: checkbox.dataset.orderAmount *@
@*         }); *@
@*       }); *@
      
@*       // In a real application, you would send this data to the server *@
@*       console.log('Orders to checkout:', selectedOrders); *@
      
@*       // For demo purposes, we'll simulate going to payment page *@
@*       alert(`Mengarahkan ke halaman pembayaran untuk ${selectedOrders.length} pesanan. Total: Rp ${selectedOrders.reduce((sum, order) => sum + parseInt(order.amount), 0).toLocaleString('id-ID')}`); *@
      
@*       // In a real app, you would redirect to payment page with order data *@
@*       // window.location.href = `/checkout?orders=${selectedOrders.join(',')}`; *@
@*     } *@
    
@*     // Initialize the page *@
@*     document.addEventListener('DOMContentLoaded', function() { *@
@*       filterOrders('all'); *@
@*     }); *@
@*   </script> *@
@* </body> *@
@* </html> *@












@* @using EFENGSI_RAHMANTO_ZALUKHU.Models.DTO *@
@* @model OrderHistoryViewDTO *@

@* @{ *@
@*     ViewData["Title"] = "History Order"; *@
@*     Layout = null; *@
@* } *@

@* <!DOCTYPE html> *@
@* <html lang="id"> *@
@* <head> *@
@*     <meta charset="UTF-8"> *@
@*     <meta name="viewport" content="width=device-width, initial-scale=1.0"> *@
@*     <title>Riwayat Pesanan</title> *@
@*     <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet"> *@
@*     <link href="https://cdn.jsdelivr.net/npm/@@fortawesome/fontawesome-free/css/all.min.css" rel="stylesheet"> *@
@*     <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet"> *@
@*     <link rel="stylesheet" href="~/assets3/Css/OrderStyle.css" /> *@
@*     <style> *@
       
@*     </style> *@
@* </head> *@
@* <body> *@
@*     <div class="container"> *@
@*         <h1>Riwayat Pesanan</h1> *@

@*         <!-- Tabs --> *@
@*         <ul class="nav nav-tabs"> *@
@*             <li class="nav-item"> *@
@*                 <a class="nav-link active" onclick="filterOrders('all')"><i class="fas fa-list"></i> Semua</a> *@
@*             </li> *@
@*             <li class="nav-item"> *@
@*                 <a class="nav-link" onclick="filterOrders('canceled')"><i class="fas fa-times-circle"></i> Dibatalkan</a> *@
@*             </li> *@
@*             <li class="nav-item"> *@
@*                 <a class="nav-link" onclick="filterOrders('unpaid')"><i class="fas fa-wallet"></i> Belum Dibayar</a> *@
@*             </li> *@
@*             <li class="nav-item"> *@
@*                 <a class="nav-link" onclick="filterOrders('processing')"><i class="fas fa-clock"></i> Diproses</a> *@
@*             </li> *@
@*             <li class="nav-item"> *@
@*                 <a class="nav-link" onclick="filterOrders('shipped')"><i class="fas fa-truck"></i> Dikirim</a> *@
@*             </li> *@
@*             <li class="nav-item"> *@
@*                 <a class="nav-link" onclick="filterOrders('delivered')"><i class="fas fa-check-circle"></i> Selesai</a> *@
@*             </li> *@
@*         </ul> *@

@*         <!-- Order List --> *@
@*         <div id="order-list"> *@
@*             @foreach (var order in Model.AllOrders) *@
@*             { *@
@*                 <div class="card order-card @order.Status.ToString().ToLower()"> *@
@*                     <div class="card-body"> *@
@*                         @if (order.OrderDetails.Any()) *@
@*                         { *@
@*                             <img src="@order.OrderDetails.First().Product.Image" *@
@*                                  alt="@order.OrderDetails.First().Product.Name" *@
@*                                  onerror="this.onerror=null;this.src='/images/default-product.png';"> *@
@*                         } *@
@*                         <i class="fas @GetStatusIcon(order.Status) status-icon"></i> *@
@*                         <div> *@
@*                             <h5 class="card-title">@order.OrderCode</h5> *@
@*                             <p class="card-text">Status: @GetStatusName(order.Status)</p> *@
@*                             <p class="card-text text-secondary">Tanggal: @order.OrderDate.ToString("dd MMM yyyy")</p> *@
@*                             <p class="card-text">Total: Rp @order.OrderDetails.Sum(od => od.PriceAtPurchase * od.Quantity).ToString("N0")</p> *@
@*                             <a href="@Url.Action("Detail", new { id = order.Id })" class="btn btn-sm btn-outline-primary">Detail</a> *@
@*                             @if (order.Status == GeneralOrderStatus.GeneralOrderStatusData.Unpaid || *@
@*                            order.Status == GeneralOrderStatus.GeneralOrderStatusData.Processing) *@
@*                             { *@
@*                                 <form asp-action="CancelOrder" method="post" class="cancel-form d-inline"> *@
@*                                     <input type="hidden" name="orderId" value="@order.Id" /> *@
@*                                     <button type="submit" class="btn btn-sm btn-cancel"> *@
@*                                         <i class="fas fa-times"></i> Batalkan *@
@*                                     </button> *@
@*                                 </form> *@
@*                             } *@
@*                         </div> *@
@*                     </div> *@
@*                 </div> *@
@*             } *@
@*         </div> *@
@*     </div> *@

@*     @functions { *@
@*         string GetStatusIcon(GeneralOrderStatus.GeneralOrderStatusData status) *@
@*         { *@
@*             return status switch *@
@*             { *@
@*                 GeneralOrderStatus.GeneralOrderStatusData.Canceled => "fa-times-circle", *@
@*                 GeneralOrderStatus.GeneralOrderStatusData.Unpaid => "fa-wallet", *@
@*                 GeneralOrderStatus.GeneralOrderStatusData.Processing => "fa-clock", *@
@*                 GeneralOrderStatus.GeneralOrderStatusData.Shipped => "fa-truck", *@
@*                 GeneralOrderStatus.GeneralOrderStatusData.Delivered => "fa-check-circle", *@
@*                 _ => "fa-question-circle" *@
@*             }; *@
@*         } *@

@*         string GetStatusName(GeneralOrderStatus.GeneralOrderStatusData status) *@
@*         { *@
@*             return status switch *@
@*             { *@
@*                 GeneralOrderStatus.GeneralOrderStatusData.Canceled => "Dibatalkan", *@
@*                 GeneralOrderStatus.GeneralOrderStatusData.Unpaid => "Belum Dibayar", *@
@*                 GeneralOrderStatus.GeneralOrderStatusData.Processing => "Diproses", *@
@*                 GeneralOrderStatus.GeneralOrderStatusData.Shipped => "Dikirim", *@
@*                 GeneralOrderStatus.GeneralOrderStatusData.Delivered => "Selesai", *@
@*                 _ => "Tidak Diketahui" *@
@*             }; *@
@*         } *@
@*     } *@

@*     <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script> *@
@*     <script> *@
@*         // Filter orders by status *@
@*         function filterOrders(status) { *@
@*             const orders = document.querySelectorAll('.order-card'); *@
@*             const tabs = document.querySelectorAll('.nav-link'); *@

@*             tabs.forEach(tab => { *@
@*                 tab.classList.remove('active'); *@
@*                 if (tab.getAttribute('onclick').includes(status)) { *@
@*                     tab.classList.add('active'); *@
@*                 } *@
@*             }); *@

@*             orders.forEach(order => { *@
@*                 order.style.display = (status === 'all' || order.classList.contains(status)) ? 'block' : 'none'; *@
@*             }); *@
@*         } *@

@*         // Confirm before cancel *@
@*         document.querySelectorAll('.cancel-form').forEach(form => { *@
@*             form.addEventListener('submit', e => { *@
@*                 if (!confirm('Apakah Anda yakin ingin membatalkan pesanan ini?')) { *@
@*                     e.preventDefault(); *@
@*                 } *@
@*             }); *@
@*         }); *@

@*         // Initialize page *@
@*         document.addEventListener('DOMContentLoaded', () => { *@
@*             filterOrders('all'); *@
@*         }); *@
@*     </script> *@
@* </body> *@
@* </html> *@















@* @using EFENGSI_RAHMANTO_ZALUKHU.Models.DTO *@
@* @model OrderHistoryViewDTO *@

@* @{ *@
@*     ViewData["Title"] = "History Order"; *@
@*     Layout = null; *@
@* } *@

@* <!DOCTYPE html> *@
@* <html lang="id"> *@
@* <head> *@
@*     <meta charset="UTF-8"> *@
@*     <meta name="viewport" content="width=device-width, initial-scale=1.0"> *@
@*     <title>Riwayat Pesanan</title> *@
@*     <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet"> *@
@*     <link href="https://cdn.jsdelivr.net/npm/@@fortawesome/fontawesome-free/css/all.min.css" rel="stylesheet"> *@
@*     <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet"> *@
@*     <link rel="stylesheet" href="~/assets3/Css/OrderStyle.css" /> *@
@*     <style> *@

        
@*     </style> *@
@* </head> *@
@* <body> *@
@*     <div class="container"> *@
@*         <h1>Riwayat Pesanan</h1> *@

@*         <!-- Tabs --> *@
@*         <ul class="nav nav-tabs"> *@
@*             <li class="nav-item"> *@
@*                 <a class="nav-link active" onclick="filterOrders('all')" role="tab" aria-selected="true"><i class="fas fa-list"></i> Semua</a> *@
@*             </li> *@
@*             <li class="nav-item"> *@
@*                 <a class="nav-link" onclick="filterOrders('canceled')" role="tab"><i class="fas fa-times-circle"></i> Dibatalkan</a> *@
@*             </li> *@
@*             <li class="nav-item"> *@
@*                 <a class="nav-link" onclick="filterOrders('unpaid')" role="tab"><i class="fas fa-wallet"></i> Belum Dibayar</a> *@
@*             </li> *@
@*             <li class="nav-item"> *@
@*                 <a class="nav-link" onclick="filterOrders('processing')" role="tab"><i class="fas fa-clock"></i> Diproses</a> *@
@*             </li> *@
@*             <li class="nav-item"> *@
@*                 <a class="nav-link" onclick="filterOrders('shipped')" role="tab"><i class="fas fa-truck"></i> Dikirim</a> *@
@*             </li> *@
@*             <li class="nav-item"> *@
@*                 <a class="nav-link" onclick="filterOrders('delivered')" role="tab"><i class="fas fa-check-circle"></i> Selesai</a> *@
@*             </li> *@
@*         </ul> *@

@*         <!-- Order List --> *@
@*         <div id="order-list"> *@
@*             @foreach (var order in Model.AllOrders.Select((value, index) => new { value, index })) *@
@*             { *@
@*                 <div class="card order-card @order.value.Status.ToString().ToLower()" style="--index: @order.index;"> *@
@*                     @if (order.value.Status == GeneralOrderStatus.GeneralOrderStatusData.Unpaid) *@
@*                     { *@
@*                         <input type="checkbox" class="order-checkbox" *@
@*                                data-order-id="@order.value.Id" *@
@*                                data-order-amount="@order.value.OrderDetails.Sum(od => od.PriceAtPurchase * od.Quantity)"> *@
@*                     } *@
@*                     <div class="card-body"> *@
@*                         @if (order.value.OrderDetails.Any()) *@
@*                         { *@
@*                             <img src="@order.value.OrderDetails.First().Product.Image" *@
@*                                  alt="@order.value.OrderDetails.First().Product.Name" *@
@*                                  loading="lazy" *@
@*                                  onerror="this.onerror=null;this.src='/images/default-product.png';"> *@
@*                         } *@
@*                         <i class="fas @GetStatusIcon(order.value.Status) status-icon"></i> *@
@*                         <div> *@
@*                             <h5 class="card-title">@order.value.OrderCode</h5> *@
@*                             <p class="card-text">Status: @GetStatusName(order.value.Status)</p> *@
@*                             <p class="card-text text-secondary">Tanggal: @order.value.OrderDate.ToString("dd MMM yyyy")</p> *@
@*                             <p class="card-text">Total: Rp @order.value.OrderDetails.Sum(od => od.PriceAtPurchase * od.Quantity).ToString("N0")</p> *@
@*                             <div class="d-flex gap-2"> *@
@*                                 <a href="@Url.Action("Detail", new { id = order.value.Id })" class="btn btn-sm btn-outline-primary"> *@
@*                                     <i class="fas fa-info-circle"></i> Detail *@
@*                                 </a> *@
@*                                 @if (order.value.Status == GeneralOrderStatus.GeneralOrderStatusData.Unpaid || *@
@*                                order.value.Status == GeneralOrderStatus.GeneralOrderStatusData.Processing) *@
@*                                 { *@
@*                                     <form asp-action="CancelOrder" method="post" class="cancel-form"> *@
@*                                         <input type="hidden" name="orderId" value="@order.value.Id" /> *@
@*                                         <button type="submit" class="btn btn-sm btn-cancel"> *@
@*                                             <i class="fas fa-times"></i> Batalkan *@
@*                                         </button> *@
@*                                     </form> *@
@*                                 } *@
@*                             </div> *@
@*                         </div> *@
@*                     </div> *@
@*                 </div> *@
@*             } *@
@*         </div> *@

@*         <!-- Back Button --> *@
@*         <a href="@Url.Action("Index", "UserProfile")" class="btn btn-back"> *@
@*             <i class="fas fa-arrow-left"></i> Kembali ke Profil *@
@*         </a> *@
@*     </div> *@

@*     <!-- Checkout Button --> *@
@*     <div class="checkout-btn-container"> *@
@*         <button class="checkout-btn" onclick="proceedToCheckout()"> *@
@*             <i class="fas fa-shopping-cart"></i> Checkout (<span id="selected-count">0</span>) *@
@*         </button> *@
@*     </div> *@

@*     @functions { *@
@*         string GetStatusIcon(GeneralOrderStatus.GeneralOrderStatusData status) *@
@*         { *@
@*             return status switch *@
@*             { *@
@*                 GeneralOrderStatus.GeneralOrderStatusData.Canceled => "fa-times-circle", *@
@*                 GeneralOrderStatus.GeneralOrderStatusData.Unpaid => "fa-wallet", *@
@*                 GeneralOrderStatus.GeneralOrderStatusData.Processing => "fa-clock", *@
@*                 GeneralOrderStatus.GeneralOrderStatusData.Shipped => "fa-truck", *@
@*                 GeneralOrderStatus.GeneralOrderStatusData.Delivered => "fa-check-circle", *@
@*                 _ => "fa-question-circle" *@
@*             }; *@
@*         } *@

@*         string GetStatusName(GeneralOrderStatus.GeneralOrderStatusData status) *@
@*         { *@
@*             return status switch *@
@*             { *@
@*                 GeneralOrderStatus.GeneralOrderStatusData.Canceled => "Dibatalkan", *@
@*                 GeneralOrderStatus.GeneralOrderStatusData.Unpaid => "Belum Dibayar", *@
@*                 GeneralOrderStatus.GeneralOrderStatusData.Processing => "Diproses", *@
@*                 GeneralOrderStatus.GeneralOrderStatusData.Shipped => "Dikirim", *@
@*                 GeneralOrderStatus.GeneralOrderStatusData.Delivered => "Selesai", *@
@*                 _ => "Tidak Diketahui" *@
@*             }; *@
@*         } *@
@*     } *@

@*     <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script> *@
@*     <script> *@
@*         // Filter orders by status *@
@*         function filterOrders(status) { *@
@*             const orders = document.querySelectorAll('.order-card'); *@
@*             const tabs = document.querySelectorAll('.nav-link'); *@
@*             const checkoutBtn = document.querySelector('.checkout-btn-container'); *@

@*             tabs.forEach(tab => { *@
@*                 tab.classList.remove('active'); *@
@*                 tab.setAttribute('aria-selected', 'false'); *@
@*                 if (tab.getAttribute('onclick').includes(status)) { *@
@*                     tab.classList.add('active'); *@
@*                     tab.setAttribute('aria-selected', 'true'); *@
@*                 } *@
@*             }); *@

@*             orders.forEach(order => { *@
@*                 order.style.display = (status === 'all' || order.classList.contains(status)) ? 'block' : 'none'; *@
@*             }); *@

@*             // Show/hide checkout button *@
@*             if (status === 'unpaid') { *@
@*                 checkoutBtn.style.display = 'block'; *@
@*                 document.querySelectorAll('.unpaid .order-checkbox').forEach(checkbox => { *@
@*                     checkbox.addEventListener('change', updateCheckoutButton); *@
@*                 }); *@
@*             } else { *@
@*                 checkoutBtn.style.display = 'none'; *@
@*                 document.querySelectorAll('.order-checkbox').forEach(checkbox => { *@
@*                     checkbox.checked = false; *@
@*                 }); *@
@*                 updateCheckoutButton(); *@
@*             } *@
@*         } *@

@*         // Update checkout button *@
@*         function updateCheckoutButton() { *@
@*             const selectedCheckboxes = document.querySelectorAll('.order-checkbox:checked'); *@
@*             const selectedCount = selectedCheckboxes.length; *@
@*             const checkoutBtn = document.querySelector('.checkout-btn-container'); *@
@*             const countSpan = document.getElementById('selected-count'); *@

@*             countSpan.textContent = selectedCount; *@

@*             let totalAmount = 0; *@
@*             selectedCheckboxes.forEach(checkbox => { *@
@*                 totalAmount += parseInt(checkbox.dataset.orderAmount); *@
@*             }); *@

@*             if (selectedCount > 0) { *@
@*                 checkoutBtn.querySelector('button').innerHTML = *@
@*                     `<i class="fas fa-shopping-cart"></i> Checkout (${selectedCount}) - Rp ${totalAmount.toLocaleString('id-ID')}`; *@
@*                 checkoutBtn.classList.add('bounce-animation'); *@
@*                 setTimeout(() => { *@
@*                     checkoutBtn.classList.remove('bounce-animation'); *@
@*                 }, 1000); *@
@*             } else { *@
@*                 checkoutBtn.querySelector('button').innerHTML = *@
@*                     `<i class="fas fa-shopping-cart"></i> Checkout (0)`; *@
@*             } *@
@*         } *@

@*         // Proceed to checkout *@
@*         function proceedToCheckout() { *@
@*             const selectedCheckboxes = document.querySelectorAll('.order-checkbox:checked'); *@

@*             if (selectedCheckboxes.length === 0) { *@
@*                 alert('Silakan pilih setidaknya satu pesanan untuk checkout.'); *@
@*                 return; *@
@*             } *@

@*             const selectedOrders = []; *@
@*             selectedCheckboxes.forEach(checkbox => { *@
@*                 selectedOrders.push({ *@
@*                     id: checkbox.dataset.orderId, *@
@*                     amount: checkbox.dataset.orderAmount *@
@*                 }); *@
@*             }); *@

@*             // For demo purposes *@
@*             alert(`Mengarahkan ke halaman pembayaran untuk ${selectedOrders.length} pesanan. Total: Rp ${selectedOrders.reduce((sum, order) => sum + parseInt(order.amount), 0).toLocaleString('id-ID')}`); *@
@*             // In a real app: window.location.href = `/checkout?orders=${selectedOrders.map(o => o.id).join(',')}`; *@
@*         } *@

@*         // Confirm before cancel *@
@*         document.querySelectorAll('.cancel-form').forEach(form => { *@
@*             form.addEventListener('submit', e => { *@
@*                 if (!confirm('Apakah Anda yakin ingin membatalkan pesanan ini?')) { *@
@*                     e.preventDefault(); *@
@*                 } *@
@*             }); *@
@*         }); *@

@*         // Initialize page *@
@*         document.addEventListener('DOMContentLoaded', () => { *@
@*             filterOrders('all'); *@
@*         }); *@
@*     </script> *@
@* </body> *@
@* </html> *@













@* @using EFENGSI_RAHMANTO_ZALUKHU.Models.DTO *@
@* @model OrderHistoryViewDTO *@

@* @{ *@
@*     ViewData["Title"] = "History Order"; *@
@*     Layout = null; *@
@* } *@
@* @if (TempData["Success"] != null) *@
@* { *@
@*     <div class="notification notification-success">@TempData["Success"]</div> *@
@* } *@
@* @if (TempData["Error"] != null) *@
@* { *@
@*     <div class="notification notification-error">@TempData["Error"]</div> *@
@* } *@
@* <!DOCTYPE html> *@
@* <html lang="id"> *@
@* <head> *@
@*     <meta charset="UTF-8"> *@
@*     <meta name="viewport" content="width=device-width, initial-scale=1.0"> *@
@*     <title>Riwayat Pesanan</title> *@
@*     <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet"> *@
@*     <link href="https://cdn.jsdelivr.net/npm/@@fortawesome/fontawesome-free/css/all.min.css" rel="stylesheet"> *@
@*     <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet"> *@
@*     <link rel="stylesheet" href="~/assets3/Css/OrderHistoryStyle.css" /> *@
@*     <style> *@
       
@*     </style> *@
@* </head> *@
@* <body> *@
@*     <div class="container"> *@
@*         <h1>Riwayat Pesanan</h1> *@

@*         <!-- Tabs --> *@
@*         <ul class="nav nav-tabs"> *@
@*             <li class="nav-item"> *@
@*                 <a class="nav-link active" onclick="filterOrders('all')" role="tab" aria-selected="true"><i class="fas fa-list"></i> Semua</a> *@
@*             </li> *@
@*             <li class="nav-item"> *@
@*                 <a class="nav-link" onclick="filterOrders('canceled')" role="tab"><i class="fas fa-times-circle"></i> Dibatalkan</a> *@
@*             </li> *@
@*             <li class="nav-item"> *@
@*                 <a class="nav-link" onclick="filterOrders('unpaid')" role="tab"><i class="fas fa-wallet"></i> Belum Dibayar</a> *@
@*             </li> *@
@*             <li class="nav-item"> *@
@*                 <a class="nav-link" onclick="filterOrders('processing')" role="tab"><i class="fas fa-clock"></i> Diproses</a> *@
@*             </li> *@
@*             <li class="nav-item"> *@
@*                 <a class="nav-link" onclick="filterOrders('shipped')" role="tab"><i class="fas fa-truck"></i> Dikirim</a> *@
@*             </li> *@
@*             <li class="nav-item"> *@
@*                 <a class="nav-link" onclick="filterOrders('delivered')" role="tab"><i class="fas fa-check-circle"></i> Selesai</a> *@
@*             </li> *@
@*         </ul> *@

@*         <!-- Order List --> *@
@*         <div id="order-list"> *@
@*             @foreach (var order in Model.AllOrders.Select((value, index) => new { value, index })) *@
@*             { *@
@*                 <div class="card order-card @order.value.Status.ToString().ToLower()" style="--index: @order.index;"> *@
@*                     @if (order.value.Status == GeneralOrderStatus.GeneralOrderStatusData.Unpaid) *@
@*                     { *@
@*                         <input type="checkbox" class="order-checkbox" *@
@*                                data-order-id="@order.value.Id" *@
@*                                data-order-amount="@order.value.OrderDetails.Sum(od => od.PriceAtPurchase * od.Quantity)"> *@
@*                     } *@
@*                     <div class="card-body"> *@
@*                         @if (order.value.OrderDetails.Any()) *@
@*                         { *@
@*                             <img src="@order.value.OrderDetails.First().Product.Image" *@
@*                                  alt="@order.value.OrderDetails.First().Product.Name" *@
@*                                  loading="lazy" *@
@*                                  onerror="this.onerror=null;this.src='/images/default-product.png';"> *@
@*                         } *@
@*                         <i class="fas @GetStatusIcon(order.value.Status) status-icon"></i> *@
@*                         <div class="card-content"> *@
@*                             <h5 class="card-title">@order.value.OrderCode</h5> *@
@*                             <p class="card-text">Status: @GetStatusName(order.value.Status)</p> *@
@*                             <p class="card-text text-secondary">Tanggal: @order.value.OrderDate.ToString("dd MMM yyyy")</p> *@
@*                             <p class="card-text">Total: Rp @order.value.OrderDetails.Sum(od => od.PriceAtPurchase * od.Quantity).ToString("N0")</p> *@
@*                             <div class="d-flex gap-2"> *@
@*                                 <a href="@Url.Action("Detail", new { id = order.value.Id })" class="btn btn-sm btn-outline-primary"> *@
@*                                     <i class="fas fa-info-circle"></i> Detail *@
@*                                 </a> *@
@*                                 @if (order.value.Status == GeneralOrderStatus.GeneralOrderStatusData.Unpaid || *@
@*                                order.value.Status == GeneralOrderStatus.GeneralOrderStatusData.Processing) *@
@*                                 { *@
@*                                     <form asp-action="CancelOrder" method="post" class="cancel-form"> *@
@*                                         <input type="hidden" name="orderId" value="@order.value.Id" /> *@
@*                                         <button type="submit" class="btn btn-sm btn-cancel" aria-label="Batalkan pesanan @order.value.OrderCode"> *@
@*                                             <i class="fas fa-times"></i> Batalkan *@
@*                                         </button> *@
@*                                     </form> *@
@*                                 } *@
@*                             </div> *@
@*                         </div> *@
@*                     </div> *@
@*                 </div> *@
@*             } *@
@*         </div> *@

@*         <!-- Back Button --> *@
@*         <a href="@Url.Action("Index", "UserProfile")" class="btn btn-back"> *@
@*             <i class="fas fa-arrow-left"></i> Kembali ke Profil *@
@*         </a> *@
@*     </div> *@

@*     <!-- Checkout Button --> *@
@*     <div class="checkout-btn-container"> *@
@*         <button class="checkout-btn" onclick="proceedToCheckout()"> *@
@*             <i class="fas fa-shopping-cart"></i> Checkout (<span id="selected-count">0</span>) *@
@*         </button> *@
@*     </div> *@

@*     @functions { *@
@*         string GetStatusIcon(GeneralOrderStatus.GeneralOrderStatusData status) *@
@*         { *@
@*             return status switch *@
@*             { *@
@*                 GeneralOrderStatus.GeneralOrderStatusData.Canceled => "fa-times-circle", *@
@*                 GeneralOrderStatus.GeneralOrderStatusData.Unpaid => "fa-wallet", *@
@*                 GeneralOrderStatus.GeneralOrderStatusData.Processing => "fa-clock", *@
@*                 GeneralOrderStatus.GeneralOrderStatusData.Shipped => "fa-truck", *@
@*                 GeneralOrderStatus.GeneralOrderStatusData.Delivered => "fa-check-circle", *@
@*                 _ => "fa-question-circle" *@
@*             }; *@
@*         } *@

@*         string GetStatusName(GeneralOrderStatus.GeneralOrderStatusData status) *@
@*         { *@
@*             return status switch *@
@*             { *@
@*                 GeneralOrderStatus.GeneralOrderStatusData.Canceled => "Dibatalkan", *@
@*                 GeneralOrderStatus.GeneralOrderStatusData.Unpaid => "Belum Dibayar", *@
@*                 GeneralOrderStatus.GeneralOrderStatusData.Processing => "Diproses", *@
@*                 GeneralOrderStatus.GeneralOrderStatusData.Shipped => "Dikirim", *@
@*                 GeneralOrderStatus.GeneralOrderStatusData.Delivered => "Selesai", *@
@*                 _ => "Tidak Diketahui" *@
@*             }; *@
@*         } *@
@*     } *@

@*     <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script> *@
@*     <script> *@
@*         // Filter orders by status *@
@*         function filterOrders(status) { *@
@*             const orders = document.querySelectorAll('.order-card'); *@
@*             const tabs = document.querySelectorAll('.nav-link'); *@
@*             const checkoutBtn = document.querySelector('.checkout-btn-container'); *@

@*             tabs.forEach(tab => { *@
@*                 tab.classList.remove('active'); *@
@*                 tab.setAttribute('aria-selected', 'false'); *@
@*                 if (tab.getAttribute('onclick').includes(status)) { *@
@*                     tab.classList.add('active'); *@
@*                     tab.setAttribute('aria-selected', 'true'); *@
@*                 } *@
@*             }); *@

@*             orders.forEach(order => { *@
@*                 order.style.display = (status === 'all' || order.classList.contains(status)) ? 'block' : 'none'; *@
@*             }); *@

@*             // Show/hide checkout button *@
@*             if (status === 'unpaid') { *@
@*                 checkoutBtn.style.display = 'block'; *@
@*                 document.querySelectorAll('.unpaid .order-checkbox').forEach(checkbox => { *@
@*                     checkbox.addEventListener('change', updateCheckoutButton); *@
@*                 }); *@
@*             } else { *@
@*                 checkoutBtn.style.display = 'none'; *@
@*                 document.querySelectorAll('.order-checkbox').forEach(checkbox => { *@
@*                     checkbox.checked = false; *@
@*                 }); *@
@*                 updateCheckoutButton(); *@
@*             } *@
@*         } *@

@*         // Update checkout button *@
@*         function updateCheckoutButton() { *@
@*             const selectedCheckboxes = document.querySelectorAll('.order-checkbox:checked'); *@
@*             const selectedCount = selectedCheckboxes.length; *@
@*             const checkoutBtn = document.querySelector('.checkout-btn-container'); *@
@*             const countSpan = document.getElementById('selected-count'); *@

@*             countSpan.textContent = selectedCount; *@

@*             let totalAmount = 0; *@
@*             selectedCheckboxes.forEach(checkbox => { *@
@*                 totalAmount += parseInt(checkbox.dataset.orderAmount); *@
@*             }); *@

@*             if (selectedCount > 0) { *@
@*                 checkoutBtn.querySelector('button').innerHTML = *@
@*                     `<i class="fas fa-shopping-cart"></i> Checkout (${selectedCount}) - Rp ${totalAmount.toLocaleString('id-ID')}`; *@
@*                 checkoutBtn.classList.add('bounce-animation'); *@
@*                 setTimeout(() => { *@
@*                     checkoutBtn.classList.remove('bounce-animation'); *@
@*                 }, 1000); *@
@*             } else { *@
@*                 checkoutBtn.querySelector('button').innerHTML = *@
@*                     `<i class="fas fa-shopping-cart"></i> Checkout (0)`; *@
@*             } *@
@*         } *@

@*         // Proceed to checkout *@
@*         function proceedToCheckout() { *@
@*             const selectedCheckboxes = document.querySelectorAll('.order-checkbox:checked'); *@

@*             if (selectedCheckboxes.length === 0) { *@
@*                 alert('Silakan pilih setidaknya satu pesanan untuk checkout.'); *@
@*                 return; *@
@*             } *@

@*             const selectedOrders = []; *@
@*             selectedCheckboxes.forEach(checkbox => { *@
@*                 selectedOrders.push({ *@
@*                     id: checkbox.dataset.orderId, *@
@*                     amount: checkbox.dataset.orderAmount *@
@*                 }); *@
@*             }); *@

@*             // For demo purposes *@
@*             alert(`Mengarahkan ke halaman pembayaran untuk ${selectedOrders.length} pesanan. Total: Rp ${selectedOrders.reduce((sum, order) => sum + parseInt(order.amount), 0).toLocaleString('id-ID')}`); *@
@*             // In a real app: window.location.href = `/checkout?orders=${selectedOrders.map(o => o.id).join(',')}`; *@
@*         } *@

@*         // Confirm before cancel *@
@*         document.querySelectorAll('.cancel-form').forEach(form => { *@
@*             form.addEventListener('submit', e => { *@
@*                 if (!confirm('Apakah Anda yakin ingin membatalkan pesanan ini?')) { *@
@*                     e.preventDefault(); *@
@*                 } *@
@*             }); *@
@*         }); *@

@*         document.querySelectorAll('.notification').forEach(notification => { *@
@*             setTimeout(() => notification.remove(), 3000); *@
@*         }); *@

@*         // Initialize page *@
@*         document.addEventListener('DOMContentLoaded', () => { *@
@*             filterOrders('all'); *@
@*         }); *@
@*     </script> *@
@* </body> *@
@* </html> *@







@using EFENGSI_RAHMANTO_ZALUKHU.Models.DTO
@model OrderHistoryViewDTO

@{
    ViewData["Title"] = "History Order";
    Layout = null;
}

<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Riwayat Pesanan</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/@@fortawesome/fontawesome-free/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="~/assets3/Css/OrderStyle.css" />
    <style>

    </style>
</head>
<body>
    <div class="container">
        <h1>Riwayat Pesanan</h1>

        <!-- Tabs -->
        <ul class="nav nav-tabs">
            <li class="nav-item">
                <a class="nav-link active" onclick="filterOrders('all')" role="tab" aria-selected="true"><i class="fas fa-list"></i> Semua</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" onclick="filterOrders('canceled')" role="tab"><i class="fas fa-times-circle"></i> Dibatalkan</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" onclick="filterOrders('unpaid')" role="tab"><i class="fas fa-wallet"></i> Belum Dibayar</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" onclick="filterOrders('processing')" role="tab"><i class="fas fa-clock"></i> Diproses</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" onclick="filterOrders('shipped')" role="tab"><i class="fas fa-truck"></i> Dikirim</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" onclick="filterOrders('delivered')" role="tab"><i class="fas fa-check-circle"></i> Selesai</a>
            </li>
        </ul>

        <!-- Order List -->
        <div id="order-list">
            @foreach (var order in Model.AllOrders.Select((value, index) => new { value, index }))
            {
                <div class="card order-card @order.value.Status.ToString().ToLower()" style="--index: @order.index;">
                    @if (order.value.Status == GeneralOrderStatus.GeneralOrderStatusData.Unpaid)
                    {
                        <input type="checkbox" class="order-checkbox"
                               data-order-id="@order.value.Id"
                               data-order-amount="@order.value.OrderDetails.Sum(od => od.PriceAtPurchase * od.Quantity)"
                               aria-label="Pilih pesanan @order.value.OrderCode untuk checkout">
                    }
                    @if (order.value.OrderDetails.Any())
                    {
                        <img src="@order.value.OrderDetails.First().Product.Image"
                             alt="@order.value.OrderDetails.First().Product.Name"
                             loading="lazy"
                             onerror="this.onerror=null;this.src='/images/default-product.png';">
                    }
                    <i class="fas @GetStatusIcon(order.value.Status) status-icon"></i>
                    <div class="card-body">
                        <h5 class="card-title">@order.value.OrderCode</h5>
                        <p class="card-text">Status: @GetStatusName(order.value.Status)</p>
                        <p class="card-text text-secondary">Tanggal: @order.value.OrderDate.ToString("dd MMM yyyy")</p>
                        <p class="card-text">Total: Rp @order.value.OrderDetails.Sum(od => od.PriceAtPurchase * od.Quantity).ToString("N0")</p>
                        <div class="d-flex gap-2">
                            <a href="@Url.Action("Detail", new { id = order.value.Id })" class="btn btn-sm btn-outline-primary">
                                <i class="fas fa-info-circle"></i> Detail
                            </a>
                            @if (order.value.Status == GeneralOrderStatus.GeneralOrderStatusData.Unpaid ||
                           order.value.Status == GeneralOrderStatus.GeneralOrderStatusData.Processing)
                            {
                                <form asp-action="CancelOrder" method="post" class="cancel-form">
                                    <input type="hidden" name="orderId" value="@order.value.Id" />
                                    <button type="submit" class="btn btn-sm btn-cancel" aria-label="Batalkan pesanan @order.value.OrderCode">
                                        <i class="fas fa-times"></i> Batalkan
                                    </button>
                                </form>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Back Button -->
        <a href="@Url.Action("Index", "UserProfile")" class="btn btn-back">
            <i class="fas fa-arrow-left"></i> Back
        </a>
    </div>

    <!-- Checkout Button -->
    <div class="checkout-btn-container">
        <button class="checkout-btn" onclick="proceedToCheckout()">
            <i class="fas fa-shopping-cart"></i> Checkout (<span id="selected-count">0</span>)
        </button>
    </div>

    @functions {
        string GetStatusIcon(GeneralOrderStatus.GeneralOrderStatusData status)
        {
            return status switch
            {
                GeneralOrderStatus.GeneralOrderStatusData.Canceled => "fa-times-circle",
                GeneralOrderStatus.GeneralOrderStatusData.Unpaid => "fa-wallet",
                GeneralOrderStatus.GeneralOrderStatusData.Processing => "fa-clock",
                GeneralOrderStatus.GeneralOrderStatusData.Shipped => "fa-truck",
                GeneralOrderStatus.GeneralOrderStatusData.Delivered => "fa-check-circle",
                _ => "fa-question-circle"
            };
        }

        string GetStatusName(GeneralOrderStatus.GeneralOrderStatusData status)
        {
            return status switch
            {
                GeneralOrderStatus.GeneralOrderStatusData.Canceled => "Dibatalkan",
                GeneralOrderStatus.GeneralOrderStatusData.Unpaid => "Belum Dibayar",
                GeneralOrderStatus.GeneralOrderStatusData.Processing => "Diproses",
                GeneralOrderStatus.GeneralOrderStatusData.Shipped => "Dikirim",
                GeneralOrderStatus.GeneralOrderStatusData.Delivered => "Selesai",
                _ => "Tidak Diketahui"
            };
        }
    }

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Filter orders by status
        function filterOrders(status) {
            const orders = document.querySelectorAll('.order-card');
            const tabs = document.querySelectorAll('.nav-link');
            const checkoutBtn = document.querySelector('.checkout-btn-container');

            tabs.forEach(tab => {
                tab.classList.remove('active');
                tab.setAttribute('aria-selected', 'false');
                if (tab.getAttribute('onclick').includes(status)) {
                    tab.classList.add('active');
                    tab.setAttribute('aria-selected', 'true');
                }
            });

            orders.forEach(order => {
                order.style.display = (status === 'all' || order.classList.contains(status)) ? 'block' : 'none';
            });

            // Show/hide checkout button
            if (status === 'unpaid') {
                checkoutBtn.style.display = 'block';
                document.querySelectorAll('.unpaid .order-checkbox').forEach(checkbox => {
                    checkbox.addEventListener('change', updateCheckoutButton);
                });
            } else {
                checkoutBtn.style.display = 'none';
                document.querySelectorAll('.order-checkbox').forEach(checkbox => {
                    checkbox.checked = false;
                });
                updateCheckoutButton();
            }
        }

        // Update checkout button
        function updateCheckoutButton() {
            const selectedCheckboxes = document.querySelectorAll('.order-checkbox:checked');
            const selectedCount = selectedCheckboxes.length;
            const checkoutBtn = document.querySelector('.checkout-btn-container');
            const countSpan = document.getElementById('selected-count');

            countSpan.textContent = selectedCount;

            let totalAmount = 0;
            selectedCheckboxes.forEach(checkbox => {
                totalAmount += parseInt(checkbox.dataset.orderAmount);
            });

            if (selectedCount > 0) {
                checkoutBtn.querySelector('button').innerHTML =
                    `<i class="fas fa-shopping-cart"></i> Checkout (${selectedCount}) - Rp ${totalAmount.toLocaleString('id-ID')}`;
                checkoutBtn.classList.add('bounce-animation');
                setTimeout(() => {
                    checkoutBtn.classList.remove('bounce-animation');
                }, 1000);
            } else {
                checkoutBtn.querySelector('button').innerHTML =
                    `<i class="fas fa-shopping-cart"></i> Checkout (0)`;
            }
        }

        // Proceed to checkout
        function proceedToCheckout() {
            const selectedCheckboxes = document.querySelectorAll('.order-checkbox:checked');

            if (selectedCheckboxes.length === 0) {
                alert('Silakan pilih setidaknya satu pesanan untuk checkout.');
                return;
            }

            const selectedOrders = [];
            selectedCheckboxes.forEach(checkbox => {
                selectedOrders.push({
                    id: checkbox.dataset.orderId,
                    amount: checkbox.dataset.orderAmount
                });
            });

            // For demo purposes
            alert(`Mengarahkan ke halaman pembayaran untuk ${selectedOrders.length} pesanan. Total: Rp ${selectedOrders.reduce((sum, order) => sum + parseInt(order.amount), 0).toLocaleString('id-ID')}`);
            // In a real app: window.location.href = `/checkout?orders=${selectedOrders.map(o => o.id).join(',')}`;
        }

        // Confirm before cancel
        document.querySelectorAll('.cancel-form').forEach(form => {
            form.addEventListener('submit', e => {
                if (!confirm('Apakah Anda yakin ingin membatalkan pesanan ini?')) {
                    e.preventDefault();
                }
            });
        });

        // Initialize page
        document.addEventListener('DOMContentLoaded', () => {
            filterOrders('all');
        });
    </script>
</body>
</html>